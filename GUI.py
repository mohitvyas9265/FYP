    1 #! /usr/bin/env python
    2 #  -*- coding: utf-8 -*-
    3 #
    4 # GUI module generated by PAGE version 5.2
    5 #  in conjunction with Tcl version 8.6
    6 #    May 12, 2020 04:59:41 PM +0530  platform: Windows NT
    7 
    8 import sys
    9 
   10 try:
   11     import Tkinter as tk
   12 except ImportError:
   13     import tkinter as tk
   14 
   15 try:
   16     import ttk
   17     py3 = False
   18 except ImportError:
   19     import tkinter.ttk as ttk
   20     py3 = True
   21 
   22 import GUI_support
   23 
   24 def vp_start_gui():
   25     '''Starting point when module is the main routine.'''
   26     global val, w, root
   27     root = tk.Tk()
   28     GUI_support.set_Tk_var()
   29     top = Toplevel1 (root)
   30     GUI_support.init(root, top)
   31     root.mainloop()
   32 
   33 w = None
   34 def create_Toplevel1(rt, *args, **kwargs):
   35     '''Starting point when module is imported by another module.
   36        Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
   37     global w, w_win, root
   38     #rt = root
   39     root = rt
   40     w = tk.Toplevel (root)
   41     GUI_support.set_Tk_var()
   42     top = Toplevel1 (w)
   43     GUI_support.init(w, top, *args, **kwargs)
   44     return (w, top)
   45 
   46 def destroy_Toplevel1():
   47     global w
   48     w.destroy()
   49     w = None
   50 
   51 class Toplevel1:
   52     def __init__(self, top=None):
   53         '''This class configures and populates the toplevel window.
   54            top is the toplevel containing window.'''
   55         _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
   56         _fgcolor = '#000000'  # X11 color: 'black'
   57         _compcolor = '#d9d9d9' # X11 color: 'gray85'
   58         _ana1color = '#d9d9d9' # X11 color: 'gray85'
   59         _ana2color = '#ececec' # Closest X11 color: 'gray92'
   60         font10 = "-family {@MS UI Gothic} -size 20"
   61         font11 = "-family {Segoe UI} -size 14"
   62         self.style = ttk.Style()
   63         if sys.platform == "win32":
   64             self.style.theme_use('winnative')
   65         self.style.configure('.',background=_bgcolor)
   66         self.style.configure('.',foreground=_fgcolor)
   67         self.style.configure('.',font="TkDefaultFont")
   68         self.style.map('.',background=
   69             [('selected', _compcolor), ('active',_ana2color)])
   70 
   71         top.geometry("600x450+330+124")
   72         top.minsize(120, 1)
   73         top.maxsize(1370, 749)
   74         top.resizable(1, 1)
   75         top.title("CyberBullying Detection System")
   76         top.configure(background="#d9d9d9")
   77 #idhar se main start h
   78         self.Frame1 = tk.Frame(top)
   79         self.Frame1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
   80         self.Frame1.configure(relief='groove')
   81         self.Frame1.configure(borderwidth="2")
   82         self.Frame1.configure(relief="groove")
   83         self.Frame1.configure(background="#caeac8")
   84 #title
   85         self.Label1 = tk.Label(self.Frame1)
   86         self.Label1.place(relx=0.118, rely=0.071, height=43, width=478)
   87         self.Label1.configure(background="#d0d0e1")
   88         self.Label1.configure(disabledforeground="#a3a3a3")
   89         self.Label1.configure(font=font10)
   90         self.Label1.configure(foreground="#000000")
   91         self.Label1.configure(highlightthickness="20")
   92         self.Label1.configure(text='''CyberBullying Detection System''')
   93 #label
   94         self.TLabel1 = ttk.Label(self.Frame1)
   95         self.TLabel1.place(relx=0.05, rely=0.211, height=31, width=217)
   96         self.TLabel1.configure(background="#d9d9d9")
   97         self.TLabel1.configure(foreground="#000000")
   98         self.TLabel1.configure(font=font11)
   99         self.TLabel1.configure(relief="flat")
  100         self.TLabel1.configure(anchor='w')
  101         self.TLabel1.configure(justify='left')
  102         self.TLabel1.configure(text='''Choose your Testing Set''')
  103 #idhar upload hona chahiye
  104         self.TestingSet = tk.Entry(self.Frame1)
  105         self.TestingSet.place(relx=0.483, rely=0.222,height=20, relwidth=0.457)
  106         self.TestingSet.configure(background="white")
  107         self.TestingSet.configure(disabledforeground="#a3a3a3")
  108         self.TestingSet.configure(font="TkFixedFont")
  109         self.TestingSet.configure(foreground="#000000")
  110         self.TestingSet.configure(insertbackground="black")
  111 #label choose model
  112         self.Label2 = tk.Label(self.Frame1)
  113         self.Label2.place(relx=0.183, rely=0.311, height=21, width=138)
  114         self.Label2.configure(background="#d9d9d9")
  115         self.Label2.configure(disabledforeground="#a3a3a3")
  116         self.Label2.configure(font=font11)
  117         self.Label2.configure(foreground="#000000")
  118         self.Label2.configure(text='''Choose Model''')
  119 #radio buttons
  120         self.LogisticRegression = tk.Radiobutton(self.Frame1)
  121         self.LogisticRegression.place(relx=0.483, rely=0.311, relheight=0.056
  122                 , relwidth=0.232)
  123         self.LogisticRegression.configure(activebackground="#ececec")
  124         self.LogisticRegression.configure(activeforeground="#000000")
  125         self.LogisticRegression.configure(background="#d9d9d9")
  126         self.LogisticRegression.configure(disabledforeground="#a3a3a3")
  127         self.LogisticRegression.configure(foreground="#000000")
  128         self.LogisticRegression.configure(highlightbackground="#d9d9d9")
  129         self.LogisticRegression.configure(highlightcolor="black")
  130         self.LogisticRegression.configure(justify='left')
  131         self.LogisticRegression.configure(text='''Logistic Regression''')
  132         self.LogisticRegression.configure(variable=GUI_support.selectedButton)
  133 
  134         self.SVM = tk.Radiobutton(self.Frame1)
  135         self.SVM.place(relx=0.483, rely=0.378, relheight=0.056, relwidth=0.26)
  136         self.SVM.configure(activebackground="#ececec")
  137         self.SVM.configure(activeforeground="#000000")
  138         self.SVM.configure(background="#d9d9d9")
  139         self.SVM.configure(disabledforeground="#a3a3a3")
  140         self.SVM.configure(foreground="#000000")
  141         self.SVM.configure(highlightbackground="#d9d9d9")
  142         self.SVM.configure(highlightcolor="black")
  143         self.SVM.configure(justify='left')
  144         self.SVM.configure(text='''Support Vector Machine''')
  145         self.SVM.configure(variable=GUI_support.selectedButton)
  146 
  147         self.RandomForestTree = tk.Radiobutton(self.Frame1)
  148         self.RandomForestTree.place(relx=0.467, rely=0.444, relheight=0.056
  149                 , relwidth=0.263)
  150         self.RandomForestTree.configure(activebackground="#ececec")
  151         self.RandomForestTree.configure(activeforeground="#000000")
  152         self.RandomForestTree.configure(background="#d9d9d9")
  153         self.RandomForestTree.configure(disabledforeground="#a3a3a3")
  154         self.RandomForestTree.configure(foreground="#000000")
  155         self.RandomForestTree.configure(highlightbackground="#d9d9d9")
  156         self.RandomForestTree.configure(highlightcolor="black")
  157         self.RandomForestTree.configure(justify='left')
  158         self.RandomForestTree.configure(text='''Random Forest Tree''')
  159         self.RandomForestTree.configure(variable=GUI_support.selectedButton)
  160 
  161     @staticmethod
  162     def popup1(event, *args, **kwargs):
  163         Popupmenu1 = tk.Menu(root, tearoff=0)
  164         Popupmenu1.configure(activebackground="#f9f9f9")
  165         Popupmenu1.configure(activeborderwidth="1")
  166         Popupmenu1.configure(activeforeground="black")
  167         Popupmenu1.configure(background="#d9d9d9")
  168         Popupmenu1.configure(borderwidth="1")
  169         Popupmenu1.configure(disabledforeground="#a3a3a3")
  170         Popupmenu1.configure(font="{Segoe UI} 9")
  171         Popupmenu1.configure(foreground="black")
  172         Popupmenu1.post(event.x_root, event.y_root)
  173 
  174     @staticmethod
  175     def popup2(event, *args, **kwargs):
  176         Popupmenu2 = tk.Menu(root, tearoff=0)
  177         Popupmenu2.configure(activebackground="#f9f9f9")
  178         Popupmenu2.configure(activeborderwidth="1")
  179         Popupmenu2.configure(activeforeground="black")
  180         Popupmenu2.configure(background="#d9d9d9")
  181         Popupmenu2.configure(borderwidth="1")
  182         Popupmenu2.configure(disabledforeground="#a3a3a3")
  183         Popupmenu2.configure(font="{Segoe UI} 9")
  184         Popupmenu2.configure(foreground="black")
  185         Popupmenu2.post(event.x_root, event.y_root)
  186 
  187     @staticmethod
  188     def popup3(event, *args, **kwargs):
  189         Popupmenu3 = tk.Menu(root, tearoff=0)
  190         Popupmenu3.configure(activebackground="#f9f9f9")
  191         Popupmenu3.configure(activeborderwidth="1")
  192         Popupmenu3.configure(activeforeground="black")
  193         Popupmenu3.configure(background="#d9d9d9")
  194         Popupmenu3.configure(borderwidth="1")
  195         Popupmenu3.configure(disabledforeground="#a3a3a3")
  196         Popupmenu3.configure(font="{Segoe UI} 9")
  197         Popupmenu3.configure(foreground="black")
  198         Popupmenu3.post(event.x_root, event.y_root)
  199 
  200 if __name__ == '__main__':
  201     vp_start_gui()
  202 
  203 

